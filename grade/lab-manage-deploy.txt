#!/bin/bash
#
# Copyright 2017 Red Hat, Inc.
#
# NAME
#     lab-manage-deploy - grading script for DO288 GE ch08s07
#
# SYNOPSIS
#     lab-manage-deploy {setup|cleanup|grade}
#
#        setup   - prepare the system for starting the lab
#        cleanup - perform post-lab cleanup
#
# DESCRIPTION
#     This script, based on singular argument, either does setup or
#     cleanup for the particular lab of awesomeness.
#
# CHANGELOG
#   * Thu Dec 3 2017 Ravi Srinivasan <rsriniva@redhat.com>
#   - initial script


PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'

# Required by the do288 shlib
this='manage-deploy'
title='Lab: Managing Application Deployments'

# This defines which subcommands are supported (setup, grade, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup cleanup grade)

function lab_setup {

  ocp_print_prereq_header
  ocp_check_openshift_up
  ocp_check_git_repo_exists 'php-scale'
  ocp_check_image_exists 'rhscl/php-70-rhel7'

  ocp_print_setup_footer

}

function lab_grade {

  ocp_print_grade_header

  ocp_login_developer

  pad " ?Project '${this}' exists"
  ocp_pass_if_project_exists "${this}"
  ocp_exit_on_failure

  local app='scale'

  pad " ?Build config '${app}' points to correct git repo"
  ocp_pass_if_bc_points_to_git_repo "${app}" 'http://services.lab.example.com/php-scale'

  pad " ?Latest '${app}' build is successful"
  ocp_pass_if_last_build_complete "${app}"

  pad " ?Pod count for app is 2"
  local pod_count=$(oc get pod -l "deploymentconfig=${app}" -o name --no-headers | wc -l)

  if [ "$pod_count" = "2" ]
  then
    print_PASS
  else
    print_FAIL
  fi

  oc get pod -l "deploymentconfig=${app}" -o name --no-headers | while read pod;
  do
    pad " ?Pod '${pod}' is ready and runnning"
    ocp_pass_if_pod_is_ready_and_running "${pod}"
  done

  local hostname='scale.apps.lab.example.com'

  pad " ?Route '${app}' points to the correct hostname"
  ocp_pass_if_route_hostname "${app}" "${hostname}"

  local hello_msg='version 1'
  pad " ?Application '${app}' returns the '${hello_msg}' message"
  ocp_pass_if_url_matches "http://${hostname}" "${hello_msg}"

  pad " ?There were at least two builds of '${app}'"
  local build_count=$(oc get build | wc -l)
  if [ "${build_count}" -ge "3" ] # +1 because of the heading
  then
      print_PASS
  else 
      print_FAIL
  fi

  pad " ?There were at least three deployments of '${app}'"
  local last_deployment=$(oc get dc "${app}" -o jsonpath='{.status.latestVersion}')
  if [ "${last_deployment}" -ge "3" ]
  then
      print_PASS
  else 
      print_FAIL
  fi

  ocp_print_grade_footer

}

function lab_cleanup {

  ocp_print_cleanup_header

  ocp_delete_project "${this}"

  ocp_print_cleanup_footer
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
